#!/usr/bin/env bash

set -e

[ -n "$MOPE_DEBUG" ] && set -x

SHIMS_PATH="${MOPE_ROOT}/shims"
PROTOTYPE_SHIM_PATH="${SHIMS_PATH}/.mope-shim"

# Create ths shims directory if it doesn't already exist
mkdir -p "$SHIMS_PATH"

# Ensure only one instance of mope-rehash is running at a time by
# setting the shell's `noclobber` option and attempting to write to
# the prototype shim file.  If the file already exists, print a warning
# to stderr and exit with a non-zero status.
set -o noclobber
{ echo > "$PROTOTYPE_SHIM_PATH"
} 2>/dev/null ||
{ echo "mope: cannot rehash: $PROTOTYPE_SHIM_PATH exists"
  exit 1
} >&2
set +o noclobber

# If we were able to obtain a lock, register a trap to clean up the
# prototype shim when the process exits.
trap remove_prototype_shim SIGINT SIGTERM EXIT

remove_prototype_shim() {
	rm -f "$PROTOTYPE_SHIM_PATH"
}

# The prototype shim file is a script that re-execs itself, passing
# its filename and any arguments to `mope exec`.  This file is
# hard linked for every binary and then removed.  The linking technique
# is fast, uses less disk space than unique files, and also serves as
# a locking mechanism.
create_prototype_shim() {
	cat > "$PROTOTYPE_SHIM_PATH" <<SH
#!/usr/bin/env bash
set -e
export MOPE_ROOT="$MOPE_ROOT"
exec mope exec "\${0##*/}" "\$@"
SH
	chmod +x "$PROTOTYPE_SHIM_PATH"
}

# Make shims by iterating over every filename argument and creating a
# hard link from the prototype shim to a file of the same name in the
# shims directory, if one does not already exist.
make_shims() {
	local glob="$@"

	for file in $glob; do
		local shim="${file##*/}"
		[ -e "$shim" ] || ln -f "$PROTOTYPE_SHIM_PATH" "$shim"
	done
}

# Empty out the shims directory and make it the working directory.
rm -f "$SHIMS_PATH"/*
cd "$SHIMS_PATH"

# Create the prototype shim, then make shims for all known binaries.
create_prototype_shim
make_shims ../versions/*/bin/*